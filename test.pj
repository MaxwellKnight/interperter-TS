map = f(arr, fn) {
	iter = f(arr, acc) {
		if(len(arr) == 0)  return acc;

		return iter(rest(arr), acc.push(fn(first(arr))));
	}
	return iter(arr, []);
}

filter = f(arr, fn) {
	iter = f(arr, acc) {
		if(len(arr) == 0)  return acc;
		if(fn(first(arr))) 
			return iter(rest(arr), acc.push(first(arr)));

		return iter(rest(arr), acc);
	}
	return iter(arr, []);
}

reduce = f(arr, fn, init) {
	def iter = f(arr, result) {
		if(len(arr) == 0) 
			return result;
		
		return iter(rest(arr), fn(result, first(arr)));
	}

	return iter(arr, init);
}

concat = f(arr1, arr2) {
	iter = f(result, arr) {
		if (len(arr) == 0) return result;
		return iter(result.push(first(arr)), rest(arr));
	}
	return iter(arr1, arr2);
}

zip = f(arr1, arr2) {
	iter = f(result, a1, a2) {
		if (len(a1) == 0) return result;
		if (len(a2) == 0) return result;
		return iter(result.push([first(a1), first(a2)]), rest(a1), rest(a2));
	}
	return iter([], arr1, arr2);
}

take = f(n, arr) {
	if(n <= 0) return [] 
	if(len(arr) == 0) return [];
	return take(n - 1, rest(arr)).push(first(arr));
}

drop = f(n, arr) {
	if(len(arr) == 0) return [];
	if(n <= 0) return drop(n, rest(arr)).push(first(arr));
	return drop(n - 1, rest(arr));
}

create_rlist = f(rlist) {
	if(len(rlist) == 0) return null
	return [first(rlist), create_rlist(rest(rlist))]
}

foo = 6;
nums = [1,2,3,4, 4 + 1, foo, foo + 1];
strs = ["1", "2", "3", "4", "5", "6", (f() => "7")()];

print("nums    :", nums);
print("strs    :", strs);

print("Rlist   :", create_rlist([1,2,3,4]))