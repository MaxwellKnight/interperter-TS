make_tree = f(arr) {
	create_tree = f(arr) {
		if(len(arr) == 0) return null;
		mid = len(arr) / 2;

		return {
			value: arr[mid],
			left: create_tree(arr.slice(0, mid)),
			right: create_tree(arr.slice(mid + 1)),
		};
	};

	inorder = f(root) {
		if(root == null) return;
		
		inorder(root.left);
		print(root.value);
		inorder(root.right);
	};

	sum_tree = f(root) {
		if(root == null) return 0;
		
		left_sum = sum_tree(root.left);
		right_sum = sum_tree(root.right);
		return left_sum + right_sum + root.value;
	};

	set = f(arr) {
		tree = create_tree(arr);
	}
	
	tree = create_tree(arr);

	return {
		view: 		f() => print(tree),
		inorder: 	f() => inorder(tree),
		sum: 			f() => sum_tree(tree),
		getRoot: 	f() => tree,
		set: 			set
	};
};

tree = make_tree([])
tree.set([1,2,3,4,5,6,7]);

i = 1;
T = []
while(i <= 10) {
	T.push(i);
	i = i + 1;
};
print(T);
